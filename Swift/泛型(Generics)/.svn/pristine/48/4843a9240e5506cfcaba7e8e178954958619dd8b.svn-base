#泛型(Generics)

泛型代码可以让你写出根据自我需求定义、适用于任何类型的，灵活且可重用的函数和类型。它的可以让你避免重复的代码，用一种清晰和抽象的方式来表达代码的意图。

##泛型函数

泛型函数可以工作于任何类型，这里是一个上面swapTwoInts(_:_:)函数的泛型版本，用于交换两个值：

```
func swapTwoValues<T>(inout a: T, inout _ b: T) {
    let temporaryA = a
    a = b
    b = temporaryA
}
```
swapTwoValues(_: _ :) 函数主体和swapTwoInts(_: _:)函数是一样的，它只在第一行稍微有那么一点点不同于swapTwoInts，如下所示：

```
func swapTwoInts(inout a: Int, inout _ b: Int)
func swapTwoValues<T>(inout a: T, inout _ b: T)
```

这个函数的泛型版本使用了占位类型名字（通常此情况下用字母T来表示）来代替实际类型名（如Int、String或Double）。占位类型名没有提示T必须是什么类型，但是它提示了a和b必须是同一类型T，而不管T表示什么类型。只有swapTwoValues(_: _:)函数在每次调用时所传入的实际类型才能决定T所代表的类型。

另外一个不同之处在于这个泛型函数名后面跟着的占位类型名字（T）是用尖括号括起来的（<T>）。这个尖括号告诉 Swift 那个T是swapTwoValues(_: _:)函数所定义的一个类型。因为T是一个占位命名类型，Swift 不会去查找命名为T的实际类型。

##类型参数

在上面的swapTwoValues例子中，占位类型T是一种类型参数的示例。类型参数指定并命名为一个占位类型，并且紧随在函数名后面，使用一对尖括号括起来（如<T>）。

一旦一个类型参数被指定，那么其可以被使用来定义一个函数的参数类型（如swapTwoValues(_: _:)函数中的参数a和b），或作为一个函数返回类型，或用作函数主体中的注释类型。在这种情况下，被类型参数所代表的占位类型不管函数任何时候被调用，都会被实际类型所替换（在上面swapTwoValues例子中，当函数第一次被调用时，T被Int替换，第二次调用时，被String替换。）。

>你可支持多个类型参数，命名在尖括号中，用逗号分开。


##命名类型参数

在简单的情况下，泛型函数或泛型类型需要指定一个占位类型（如上面的swapTwoValues泛型函数，或一个存储单一类型的泛型集，如数组），通常用一单个字母T来命名类型参数。不过，你可以使用任何有效的标识符来作为类型参数名。

如果你使用多个参数定义更复杂的泛型函数或泛型类型，那么使用更多的描述类型参数是非常有用的。例如，Swift 字典（Dictionary）类型有两个类型参数，一个是键，另外一个是值。如果你自己写字典，你或许会定义这两个类型参数为Key和Value，用来记住它们在你的泛型代码中的作用。

>请始终使用大写字母开头的驼峰式命名法（例如T和Key）来给类型参数命名，以表明它们是类型的占位符，而非类型值。



##泛型类型

常在泛型函数中，Swift 允许你定义你自己的泛型类型。这些自定义类、结构体和枚举作用于任何类型。

这里展示了如何写一个非泛型版本的栈，Int值型的栈：

```
struct IntStack {
    var items = [Int]()
    mutating func push(item: Int) {
        items.append(item)
    }
    mutating func pop() -> Int {
        return items.removeLast()
    }
}
```

这里是一个相同代码的泛型版本：

```
struct Stack<T> {
    var items = [T]()
    mutating func push(item: T) {
        items.append(item)
    }
    mutating func pop() -> T {
        return items.removeLast()
    }
}
```

##扩展一个泛型类型

当你扩展一个泛型类型的时候，你并不需要在扩展的定义中提供类型参数列表。更加方便的是，原始类型定义中声明的类型参数列表在扩展里是可以使用的，并且这些来自原始类型中的参数名称会被用作原始定义中类型参数的引用。

下面的例子扩展了泛型Stack类型，为其添加了一个名为topItem的只读计算属性，它将会返回当前栈顶端的元素而不会将其从栈中移除。

```
extension Stack {
    var topItem: T? {
        return items.isEmpty ? nil : items[items.count - 1]
    }
}
```
topItem属性会返回一个T类型的可选值。当栈为空的时候，topItem将会返回nil；当栈不为空的时候，topItem会返回items数组中的最后一个元素。

注意这里的扩展并没有定义一个类型参数列表。相反的，Stack类型已有的类型参数名称，T，被用在扩展中当做topItem计算属性的可选类型。

topItem计算属性现在可以被用来返回任意Stack实例的顶端元素而无需移除它：

```
if let topItem = stackOfStrings.topItem {
    print("The top item on the stack is \(topItem).")
}
// 输出 "The top item on the stack is tres."
```

##类型约束

swapTwoValues(_: _:)函数和Stack类型可以作用于任何类型，不过，有的时候对使用在泛型函数和泛型类型上的类型强制约束为某种特定类型是非常有用的。类型约束指定了一个必须继承自指定类的类型参数，或者遵循一个特定的协议或协议构成。

例如，Swift 的Dictionary类型对作用于其键的类型做了些限制。在字典的描述中，字典的键类型必须是可哈希，也就是说，必须有一种方法可以使其被唯一的表示。Dictionary之所以需要其键是可哈希是为了以便于其检查其是否已经包含某个特定键的值。如无此需求，Dictionary既不会告诉是否插入或者替换了某个特定键的值，也不能查找到已经存储在字典里面的给定键值。

这个需求强制加上一个类型约束作用于Dictionary的键上，当然其键类型必须遵循Hashable协议（Swift 标准库中定义的一个特定协议）。所有的 Swift 基本类型（如String，Int， Double和 Bool）默认都是可哈希。

当你创建自定义泛型类型时，你可以定义你自己的类型约束，当然，这些约束要支持泛型编程的强力特征中的多数。抽象概念如可哈希具有的类型特征是根据它们概念特征来界定的，而不是它们的直接类型特征。

##类型约束语法

你可以写一个在一个类型参数名后面的类型约束，通过冒号分割，来作为类型参数链的一部分。这种作用于泛型函数的类型约束的基础语法如下所示（和泛型类型的语法相同）：

```

func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {
    // 这里是函数主体
}

```

第一个类型参数T必须是SomeClass子类的类型约束；第二个类型参数U必须遵循SomeProtocol协议的类型约束。

##类型约束实例

```
func findIndex<T: Equatable>(array: [T], _ valueToFind: T) -> Int? {
    for (index, value) in array.enumerate() {
        if value == valueToFind {
            return index
        }
    }
    return nil
}
```

findIndex中这个单个类型参数写做：T: Equatable，也就意味着“任何T类型都遵循Equatable协议”。

##关联类型(Associated Types)

当定义一个协议时，有的时候声明一个或多个关联类型作为协议定义的一部分是非常有用的。一个关联类型作为协议的一部分，给定了类型的一个占位名（或别名）。作用于关联类型上实际类型在协议被实现前是不需要指定的。关联类型被指定为typealias关键字。

##关联类型实例


```
protocol Container {
    typealias ItemType
    mutating func append(item: ItemType)
    var count: Int { get }
    subscript(i: Int) -> ItemType { get }
}
```
Container协议定义了三个任何容器必须支持的兼容要求：

* 必须可以通过append(_:)方法添加一个新元素到容器里；
* 必须可以通过使用count属性获取容器里元素的数量，并返回一个Int值；
* 必须可以通过容器的Int索引值下标可以检索到每一个元素。

这个协议没有指定容器里的元素是如何存储的或何种类型是允许的。这个协议只指定三个任何遵循Container类型所必须支持的功能点。一个遵循的类型在满足这三个条件的情况下也可以提供其他额外的功能。任何遵循Container协议的类型必须指定存储在其里面的值类型，必须保证只有正确类型的元素可以加进容器里，必须明确可以通过其下标返回元素类型。

Container协议声明了一个ItemType的关联类型，写作typealias ItemType。这个协议不会定义ItemType是什么的别名，这个信息将由任何遵循协议的类型来提供。尽管如此，ItemType别名提供了一种识别Container中元素类型的方法，并且用于append(_:)方法和subscript方法的类型定义，以便保证任何Container期望的行为能够被执行。

生成遵循Container协议的泛型Stack类型：

```
struct Stack<T>: Container {
    // original Stack<T> implementation
    var items = [T]()
    mutating func push(item: T) {
        items.append(item)
    }
    mutating func pop() -> T {
        return items.removeLast()
    }
    // conformance to the Container protocol
    mutating func append(item: T) {
        self.push(item)
    }
    var count: Int {
        return items.count
    }
    subscript(i: Int) -> T {
        return items[i]
    }
}
```

占位类型参数T被用作append(_:)方法的item参数和下标的返回类型。Swift 因此可以推断出被用作这个特定容器的ItemType的T的合适类型。


##扩展一个存在的类型为一指定关联类型


扩展一个存在的类型添加遵循一个协议。这个类型包含一个关联类型的协议。

Swift的Array已经提供append(_:)方法，一个count属性和通过下标来查找一个自己的元素。这三个功能都达到Container协议的要求。也就意味着你可以扩展Array去遵循Container协议，只要通过简单声明Array适用于该协议而已。

```
extension Array: Container {

}
```

如同上面的泛型Stack类型一样，Array的append(_:)方法和下标保证Swift可以推断出ItemType所使用的适用的类型。定义了这个扩展后，你可以将任何Array当作Container来使用。

##Where 语句


类型约束能够确保类型符合泛型函数或类的定义约束。


对关联类型定义约束是非常有用的。你可以在参数列表中通过where语句定义参数的约束。一个where语句能够使一个关联类型遵循一个特定的协议，以及（或）那个特定的类型参数和关联类型可以是相同的。你可以写一个where语句，紧跟在在类型参数列表后面，where语句后跟一个或者多个针对关联类型的约束，以及（或）一个或多个类型和关联类型间的等价(equality)关系。


```
func allItemsMatch<
    C1: Container, C2: Container
    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable>
    (someContainer: C1, anotherContainer: C2) -> Bool {

        // 检查两个Container的元素个数是否相同
        if someContainer.count != anotherContainer.count {
            return false
        }

        // 检查两个Container相应位置的元素彼此是否相等
        for i in 0..<someContainer.count {
            if someContainer[i] != anotherContainer[i] {
                return false
            }
        }

        // 如果所有元素检查都相同则返回true
        return true

}
```

* C1必须遵循Container协议 (写作 C1: Container)。
* C2必须遵循Container协议 (写作 C2: Container)。
* C1的ItemType同样是C2的ItemType（写作 C1.ItemType == C2.ItemType）。
* C1的ItemType必须遵循Equatable协议 (写作 C1.ItemType: Equatable)。

```
var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")

var arrayOfStrings = ["uno", "dos", "tres"]

if allItemsMatch(stackOfStrings, arrayOfStrings) {
    print("All items match.")
} else {
    print("Not all items match.")
}
// 输出 "All items match."
```
allItemsMatch(_: _:)首先检查两个容器是否拥有同样数目的items，如果它们的元素数目不同，没有办法进行匹配，函数就会false。

检查完之后，函数通过for-in循环和半闭区间操作（..<）来迭代someContainer中的所有元素。对于每个元素，函数检查是否someContainer中的元素不等于对应的anotherContainer中的元素，如果这两个元素不等，则这两个容器不匹配，返回false。

如果循环体结束后未发现没有任何的不匹配，那表明两个容器匹配，函数返回true。

##泛型形参子句
泛型形参子句指定泛型类型或函数的类型形参，以及这些参数的关联约束和关联类型要求（requirement）。泛型形参子句用尖括号（<>）包住，并且有以下两种形式：

* `<泛型形参列表>`
* `<泛型形参列表 where 关联类型要求>`


泛型形参列表中泛型形参用逗号分开，其中每一个采用以下形式：

`型形参 : 约束`

泛型形参由两部分组成：类型形参及其后的可选约束。类型形参只是占位符类型（如 T，U，V，Key，Value 等）的名字而已。你可以在泛型类型、函数的其余部分或者初始化器声明，包括函数或初始化器的签名中使用它（与其任何相关类型）。

约束用于指明该类型形参继承自某个类或者遵守某个协议或协议的一部分。例如，在下面的泛型函数中，泛型形参T: Comparable表示任何用于替代类型形参T的类型实参必须满足Comparable协议。

```
func simpleMax<T: Comparable>(x: T, _ y: T) -> T {
    if x < y {
        return y
    }
    return x
}
```

##Where 子句
要想对类型形参及其关联类型指定额外关联类型要求，可以在泛型形参列表之后添加where子句。where子句由关键字where及其后的用逗号分割的多个关联类型要求组成。

where子句中的关联关系用于指明该类型形参继承自某个类或遵守某个协议或协议的一部分。尽管where子句提供了语法糖使其有助于表达类型形参上的简单约束（如T: Comparable等同于T where T: Comparable，等等），但是依然可以用来对类型形参及其关联类型提供更复杂的约束。如，<T where T: C, T: P>表示泛型类型T继承自类C且遵守协议P。

可以强制约束类型形参的关联类型遵守某个协议。例如<T: Generator where T.Element: Equatable>表示T遵守Generator协议，而且T的关联类型T.Element遵守Eauatable协议（T有关联类型Element是因为Generator声明了Element，而T遵守Generator协议）。

也可以用操作符==来指定两个类型等效的关联关系。例如，有这样一个约束：T和U遵守Generator协议，同时要求它们的关联类型等同，可以这样来表达：<T: Generator, U: Generator where T.Element == U.Element>。


当然，替代类型形参的类型实参必须满足所有类型形参的约束和关联类型要求。

泛型函数或初始化器可以重载，但在泛型形参子句中的类型形参必须有不同的约束或关联类型要求，抑或二者皆不同。当调用重载的泛型函数或始化器时，编译器会用这些约束来决定调用哪个重载函数或始化器。

```
泛型形参子句语法
泛型参数子句 → < 泛型参数列表 约束子句 可选 >
泛型参数列表 → 泛形参数 | 泛形参数 , 泛型参数列表
泛形参数 → 类型名称
泛形参数 → 类型名称 : 类型标识
泛形参数 → 类型名称 : 协议合成类型
约束子句 → where 约束列表
约束列表 → 约束 | 约束 , 约束列表
约束 → 一致性约束 | 同类型约束
一致性约束 → 类型标识 : 类型标识
一致性约束 → 类型标识 : 协议合成类型
同类型约束 → 类型标识 == 类型标识
```

##泛型实参子句
泛型实参子句指定_泛型类型_的类型实参。泛型实参子句用尖括号（<>）包住，形式如下：

`<泛型实参列表>`

泛型实参列表中类型实参有逗号分开。类型实参是实际具体类型的名字，用来替代泛型类型的泛型形参子句中的相应的类型形参。从而得到泛型类型的一个特化版本。如，Swift标准库的泛型字典类型定义如下：

```
struct Dictionary<KeyTypel: Hashable, ValueType>: Collection, DictionaryLiteralConvertible {

    /* .. */

}
```

泛型Dictionary类型的特化版本，Dictionary<String, Int>就是用具体的String和Int类型替代泛型类型KeyType: Hashable和ValueType产生的。每一个类型实参必须满足它所替代的泛型形参的所有约束，包括任何where子句所指定的额外的关联类型要求。上面的例子中，类型形参Key类型要求满足Hashable协议，因此String也必须满足Hashable协议。

可以用本身就是泛型类型的特化版本的类型实参替代类型形参（假设已满足合适的约束和关联类型要求）。例如，为了生成一个元素类型是整型数组的数组，可以用数组的特化版本Array<Int>替代泛型类型Array<T>的类型形参 T 来实现。

`let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`

如泛型形参子句所述，不能用泛型实参子句来指定泛型函数或初始化器的类型实参。

泛型实参子句语法

```
(泛型参数子句Generic Argument Clause) → < 泛型参数列表 >
泛型参数列表 → 泛型参数 | 泛型参数 , 泛型参数列表
泛型参数 → 类型
```